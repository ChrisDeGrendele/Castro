# ------------------  INPUTS TO MAIN PROGRAM  -------------------
max_step = 1000000
stop_time = 10000

# PROBLEM SIZE & GEOMETRY
geometry.is_periodic =  1      1      1
geometry.coord_sys   =  0
geometry.prob_lo     =  -1.0e14 -1.0e14 -1.0e14
geometry.prob_hi     =   1.0e14  1.0e14  1.0e14
amr.n_cell           =  128    128    128  #This will lead to ~ cell size in paper!
#amr.n_cell          = 64 64 64

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall
# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
castro.lo_bc       =  0   0   0
castro.hi_bc       =  0   0   0

# WHICH PHYSICS
castro.do_hydro = 1
castro.do_react = 0
castro.ppm_type = 1
castro.time_integration_method = 0 #strang not mol
castro.do_radiation = 1    
castro.do_reflux = 1      

# TIME STEP CONTROL
castro.dt_cutoff      = 5.e-20  # level 0 timestep below which we halt
castro.cfl            = 0.6     # cfl number for hyperbolic system

# DIAGNOSTICS & VERBOSITY
castro.sum_interval   = 1       # timesteps between computing mass
castro.v              = 1       # verbosity in Castro.cpp
amr.v                 = 1       # verbosity in Amr.cpp

# REFINEMENT / REGRIDDING
amr.max_level       = 0       # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 # refinement ratio
amr.regrid_int      = 2       # how often to regrid
amr.blocking_factor = 32      # block factor in grid generation
amr.max_grid_size   = 64

# CHECKPOINT FILES
amr.checkpoint_files_output = 1  # 1 => Don't suppress plotfiles
#amr.check_int = 1000            # number of timesteps between checkfiles

#PLOTFILES
amr.plot_files_output = 1     
amr.plot_int = 5               # number of timesteps between plotfiles


# PROBIN FILENAME
amr.probin_file = probin.3d






# ---------------RADIATION STUFF BELOW DIRECTLY FROM RAD2TSHOCK ------------------
# ------------------  INPUTS TO RADIATION CLASS  -------------------

##### SolverType #####
# 0: single group diffusion w/o coupling to hydro
# 5: SGFLD       6: MGFLD
radiation.SolverType = 5

radiation.comoving = 1

radiation.Er_Lorentz_term = 0

# RADIATION TOLERANCES
radiation.reltol  = 1.e-6 # relative tolerance for implicit update loop
radiation.abstol  = 0.0   # absolute tolerance for implicit update loop
radiation.maxiter = 50    # return after numiter iterations if not converged

# RADIATION LIMITER
radiation.limiter = 0     # 0 = no limiter
                          # 2 = correct form of Lev-Pom limiter

radiation.delta_temp            = 0.01

# RADIATION VERBOSITY
radiation.v               = 1    # verbosity

# We set radiation boundary conditions directly since they do not
# correspond neatly to the physical boundary conditions used for the fluid.
# The choices are:
# 101 = LO_DIRICHLET           102 = LO_NEUMANN
# 104 = LO_MARSHAK             105 = LO_SANCHEZ_POMRANING

radiation.lo_bc     = 102 102 102                      
radiation.hi_bc     = 102 102 102                      

# For each boundary, we can specify either a constant boundary value
# or use a Fortran function FORT_RADBNDRY to specify values that vary
# in space and time.

# If bcflag is 0 then bcval is used, otherwise FORT_RADBNDRY used:

radiation.lo_bcflag = 0 0 0
radiation.hi_bcflag = 0 0 0

# bcval is interpreted differently depending on the boundary condition
# 101 = LO_DIRICHLET           bcval is Dirichlet value of rad energy density
# 102 = LO_NEUMANN             bcval is inward flux of rad energy
# 104 = LO_MARSHAK             bcval is incident flux
# 105 = LO_SANCHEZ_POMRANING   bcval is incident flux

radiation.lo_bcval = 0.0 0.0 0.0
radiation.hi_bcval = 0.0 0.0 0.0

radiation.do_real_eos = 1

# Power-law opacities are represented as:
#
#    const_kappa * (rho**m) * (temp**(-n)) * (nu**(p))
#
# Since the formula is both nonphysical and singular, prop_temp_floor
# provides a floor for the temperature used in the power-law computation.

# Planck mean opacity
radiation.const_kappa_p =  2e-16 #CHECK----------
radiation.kappa_p_exp_m =  0.0
radiation.kappa_p_exp_n =  0.0

# Rosseland mean opacity
radiation.const_kappa_r =  2e-10 #CHECK----------
radiation.kappa_r_exp_m =  0.0
radiation.kappa_r_exp_n =  0.0

# ------------------  INPUTS TO RADIATION SOLVER CLASS  -------------------

# solver flag values <  100 use HypreABec, support symmetric matrices only
# solver flag values >= 100 use HypreMultiABec, support nonsymmetric matrices
#
# PFMG does not supprt 1D.
# ParCSR does not work for periodic boundaries.
# For MGFLD with accelerate = 2, must use >=100.
#
# 0     SMG
# 1     PFMG  (>= 2D only)
# 100   AMG   using ParCSR ObjectType
# 102   GMRES using ParCSR ObjectType
# 103   GMRES using SStruct ObjectType
# 104   GMRES using AMG as preconditioner
# 109   GMRES using Struct SMG/PFMG as preconditioner
# 150   AMG   using ParCSR ObjectType
# 1002  PCG   using ParCSR ObjectType
# 1003  PCG   using SStruct ObjectType

radsolve.level_solver_flag = 0   # can be any supported hypre solver flag

radsolve.reltol     = 1.0e-11 # relative tolerance
radsolve.abstol     = 0.0     # absolute tolerance (often not necessary)
radsolve.maxiter    = 200     # linear solver iteration limit

radsolve.v = 1      # verbosity

hmabec.verbose = 2  # verbosity for HypreMultiABec solvers
habec.verbose  = 2  # verbosity for HypreABec solvers

#
# The default strategy is SFC.
#
DistributionMapping.strategy = ROUNDROBIN
DistributionMapping.strategy = KNAPSACK
DistributionMapping.strategy = SFC


##################################################################

################################################################
# Reset (rho*e) if it goes negative in the transverse terms
castro.transverse_reset_rhoe = 1

# Reset rho if it goes negative in the transverse terms
castro.transverse_reset_density = 1

# Choose the method used on a negative density reset
castro.density_reset_method = 2

# Explicitly limit fluxes to avoid hitting a negative density
castro.limit_fluxes_on_small_dens = 1
